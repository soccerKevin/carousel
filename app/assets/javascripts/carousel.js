// Generated by CoffeeScript 1.9.3
var Carousel;

Carousel = (function() {
  function Carousel(selector, options) {
    var $elements;
    if (selector == null) {
      throw new Error('Missing Parameters Error');
    }
    this.carousel = $(selector);
    if (!this.carousel[0]) {
      throw new Error('Invalid Carousel Selector');
    }
    this.options = this.mergeOptions(options);
    this.carousel.wrapInner("<div class='carousel-track'></div>");
    this.carousel.wrapInner("<div class='carousel-scroller'></div>");
    this.carousel.wrapInner("<div class='carousel-container'></div>");
    this.scroller = new window.Scroller('.carousel-scroller', '.carousel-track', this.options);
    this.indexElements();
    $elements = this.getElements();
    $elements.addClass('carousel-slide');
    $($elements.get(this.options.initialSlide)).addClass('carousel-current');
    this.prevBtn = $("" + this.options.prev);
    this.nextBtn = $("" + this.options.next);
    this.handlers();
  }

  Carousel.prototype.getElements = function() {
    return this.scroller.getElements();
  };

  Carousel.prototype.indexElements = function() {
    var $elements, elem, index, ref, results;
    $elements = this.getElements();
    ref = $elements.get();
    results = [];
    for (index in ref) {
      elem = ref[index];
      results.push($(elem).attr('data-carousel-index', index));
    }
    return results;
  };

  Carousel.prototype.defaults = function() {
    var defaults;
    return defaults = {
      adaptiveHeight: true,
      autoplay: false,
      arrows: true,
      alignment: 'left',
      containWidth: false,
      containHeight: true,
      cssEase: 'ease-out',
      draggable: true,
      edgeFriction: 0,
      effect: 'fade',
      focusOnClick: false,
      initialSlide: 0,
      infinite: false,
      lazyLoad: false,
      lazyLoadRate: 0,
      lazyLoadAttribute: 'data-lazy',
      pagination: false,
      respondTo: window,
      ltr: true,
      slideSelector: '>*',
      slidesToScroll: 1,
      slidesToShow: 1,
      speed: 1000,
      touchThreshold: 5
    };
  };

  Carousel.prototype.mergeOptions = function(options) {
    var attribute, combined, defaults;
    defaults = this.defaults();
    combined = {};
    for (attribute in defaults) {
      combined[attribute] = defaults[attribute];
    }
    for (attribute in options) {
      combined[attribute] = options[attribute];
    }
    return combined;
  };

  Carousel.prototype.handlers = function() {
    return this.arrowHandlers();
  };

  Carousel.prototype.moveDirection = function(direction) {
    if (this.moving) {
      return false;
    }
    this.moving = true;
    this.scroller[direction]();
    return this.moving = false;
  };

  Carousel.prototype.arrowHandlers = function() {
    this.prevBtn.on('click', (function(_this) {
      return function(e) {
        return _this.moveDirection('prev');
      };
    })(this));
    return this.nextBtn.on('click', (function(_this) {
      return function(e) {
        return _this.moveDirection('next');
      };
    })(this));
  };

  return Carousel;

})();

$(function() {
  return window.Carousel = Carousel;
});
