// Generated by CoffeeScript 1.9.3

/*
  Responsive Carousel that just works

  You should contain your carousel in a containing div.
  try not to mess with the element that you tell carousel to use
 */

/*
   * defaults =
   * @param next [string]
  #default: none
  #next button selector (required)

   * @param prev [string]
  #default: none
  #prev button selector (required)

   * @option alignment [string]
  #default: 'left'
  #values: left, right, center

   * @option initialSlide [int]
  #default: 0
  #must be positive

   * @option ltr [boolean]
  #default: true
  #left to right (true or false)

   * @option slidesToScroll [int]
  #default: 1
  #shift this many slides

   * @option [float] slideWidth
  #default: 1
  #width of slides compared to carousel as a decimal
  #example:
  #show 2 slides at once, set to .5
  #show 4 slides at once, set to .25

   * @option [boolean] infinite
  #default: false
  #fake the infinite slides

   * @option [string] slideSelector
  #default: '>*'
  #Carousel uses to get elements to use as slides

   * @option [boolean] draggable
  #default: true
  #allow the user to move the carousel using their mouse

   * @option [string] effect
  #default: 'scroll'
  #possible: scroll, fade
  #the effect to use when changing slides

   * @option [string] cssEase
  #default: 'ease-out'
  #method of transition

   * @option [int] speed
  #default: 1000
  #speed of transition in ms

  #edgeFriction: 0
  #touchThreshold: 5

   * @option [boolean] lazyLoad
  #default: false
  #load images as you need them vs all at once

   * @option [int] lazyLoadRate
  #default: 0
  #load this many images past the current image

   * @option [string] lazyLoadAttribute
  #default: 'data-lazy'
  #attribute on img tag to get the source of the image for lazy loading

   * @option [boolean] arrows
  #default: true
  #show the prev and next arrows

   * @option [boolean] hideUnclickableArrows
  #default: false
  #hide left arrow if no more slides to the left
  #hide right arrow if no more slides to the right
  #only available in non-infinite mode
 */
var Carousel;

Carousel = (function() {

  /*
    selector = main Carousel Container
    options = overrides for defaults
   */
  function Carousel(selector, options) {
    var $slides;
    if (selector == null) {
      throw new Error('Missing Parameters Error');
    }
    this.carousel = $(selector);
    this.carouselWrapper = new window.CarouselWrapper(selector);
    if (!this.carousel[0]) {
      throw new Error('Invalid Carousel Selector');
    }
    this.options = window.Util.combineHash(this.defaults(), options);
    this.carousel.wrapInner("<div class='carousel-track'></div>");
    this.carousel.wrapInner("<div class='carousel-scroller'></div>");
    this.carousel.wrapInner("<div class='carousel-container'></div>");
    this.carouselContainer = this.carousel.find('.carousel-container');
    this.scroller = new window.Scroller('.carousel-scroller', '.carousel-track', this.options);
    $slides = this.getSlides();
    $slides.addClass('carousel-slide');
    this.prevBtn = $("" + this.options.prev);
    this.nextBtn = $("" + this.options.next);
    this.handlers();
    this.applyOptions(this.options);
    setTimeout(((function(_this) {
      return function() {
        return _this.scroller.gotoCurrent(false);
      };
    })(this)), 50);
  }

  Carousel.prototype.applyOptions = function() {
    return this.scroller.updateOptions(this.options);
  };

  Carousel.prototype.updateOptions = function(options) {
    this.options = window.Util.combineHash(this.options, options);
    return this.applyOptions();
  };

  Carousel.prototype.getSlides = function() {
    return this.scroller.getSlides();
  };

  Carousel.prototype.defaults = function() {
    var defaults;
    return defaults = {
      next: '#next .arrow',
      prev: '#prev .arrow',
      alignment: 'left',
      initialSlide: 0,
      ltr: true,
      slidesToScroll: 1,
      slideWidth: '1',
      infinite: false,
      slideSelector: '>*',
      draggable: true,
      effect: 'scroll',
      cssEase: 'ease-out',
      speed: 1000,
      edgeFriction: 0,
      touchThreshold: 5,
      lazyLoad: false,
      lazyLoadRate: 0,
      lazyLoadAttribute: 'data-lazy',
      arrows: true,
      hideUnclickableArrows: false
    };
  };

  Carousel.prototype.moveDirection = function(direction) {
    if (this.moving) {
      return false;
    }
    this.moving = true;
    this.scroller[direction]();
    return this.moving = false;
  };

  Carousel.prototype.resize = function() {
    this.applyOptions();
    return this.scroller.gotoCurrent();
  };

  Carousel.prototype.handlers = function() {
    this.arrowHandlers();
    return this.resizeHandler();
  };

  Carousel.prototype.resizeHandler = function() {
    return $(window).resize((function(_this) {
      return function() {
        if (_this.carouselWrapper.didResize()) {
          return _this.resize();
        }
      };
    })(this));
  };

  Carousel.prototype.arrowHandlers = function() {
    this.prevBtn.on('click', (function(_this) {
      return function(e) {
        return _this.moveDirection('prev');
      };
    })(this));
    return this.nextBtn.on('click', (function(_this) {
      return function(e) {
        return _this.moveDirection('next');
      };
    })(this));
  };

  return Carousel;

})();

$(function() {
  return window.Carousel = Carousel;
});
