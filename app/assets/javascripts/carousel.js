// Generated by CoffeeScript 1.9.3

/*
  Responsive Carousel that just works

  You should contain your carousel in a containing div.
  try not to mess with the element that you tell carousel to use
 */

/* defaults =
   * @param next [string]
  ## next button selector (required)
   * @param prev [string]
  ## prev button selector (required)
   * @option alignment [string]
  ## values: left, right, center.  default = 'left'
   * @option initialSlide [int]
  ## must be positive. default = 0
   * @option ltr [boolean]
  ## left to right (true or false). default = true
   * @option slidesToScroll [int]
  ## shift this many slides. default = 1

   * @option [float] width of slides compared to carousel as a decimal
   * show 2 slides at once, set to .5
   * show 4 slides at once, set to .25
  slideWidth: '1'

   * @option [boolean] fake the infinite slides
  infinite: false

   * @option [string] slide selector, what Carousel uses to get slides
  slideSelector: '>*'

   *
   * adaptiveHeight: true

   * @option is the user allowed to move the carousel using their mouse?
  draggable: true

   * @option values, scroll, fade
  effect: 'scroll'

   * @option the method of transition
  cssEase: 'ease-out'

   * @option the speed of transition
  speed: 1000

  edgeFriction: 0
  touchThreshold: 5

   * @option are you loading images after page carousel load?
  lazyLoad: false

   * @option how many images ahead to load
  lazyLoadRate: 0

   * @option attribute on img tag to get the source of the image for lazy loading
  lazyLoadAttribute: 'data-lazy'

   * @option show arrows?
  arrows: true

   * @option hide left arrow if no more slides to the left
   * @option hide right arrow if no more slides to the right
   * @option only available in non-infinite mode
  hideUnclickableArrows: false
 */
var Carousel;

Carousel = (function() {

  /*
    selector = main Carousel Container
    options = overrides for defaults
   */
  function Carousel(selector, options) {
    var $slides;
    if (selector == null) {
      throw new Error('Missing Parameters Error');
    }
    this.carousel = $(selector);
    this.carouselWrapper = new window.CarouselWrapper(selector);
    if (!this.carousel[0]) {
      throw new Error('Invalid Carousel Selector');
    }
    this.options = window.Util.combineHash(this.defaults(), options);
    this.carousel.wrapInner("<div class='carousel-track'></div>");
    this.carousel.wrapInner("<div class='carousel-scroller'></div>");
    this.carousel.wrapInner("<div class='carousel-container'></div>");
    this.carouselContainer = this.carousel.find('.carousel-container');
    this.scroller = new window.Scroller('.carousel-scroller', '.carousel-track', this.options);
    $slides = this.getSlides();
    $slides.addClass('carousel-slide');
    this.prevBtn = $("" + this.options.prev);
    this.nextBtn = $("" + this.options.next);
    this.handlers();
    this.applyOptions(this.options);
    setTimeout(((function(_this) {
      return function() {
        return _this.scroller.gotoCurrent(false);
      };
    })(this)), 50);
  }

  Carousel.prototype.applyOptions = function(options) {
    return this.scroller.setSlideWidth();
  };

  Carousel.prototype.updateOptions = function(options) {
    this.options = window.Util.combineHash(this.options, options);
    return this.applyOptions();
  };

  Carousel.prototype.getSlides = function() {
    return this.scroller.getSlides();
  };

  Carousel.prototype.defaults = function() {
    var defaults;
    return defaults = {
      next: '#next .arrow',
      prev: '#prev .arrow',
      alignment: 'left',
      initialSlide: 0,
      ltr: true,
      slidesToScroll: 1,
      slideWidth: '1',
      infinite: false,
      slideSelector: '>*',
      draggable: true,
      effect: 'scroll',
      cssEase: 'ease-out',
      speed: 1000,
      edgeFriction: 0,
      touchThreshold: 5,
      lazyLoad: false,
      lazyLoadRate: 0,
      lazyLoadAttribute: 'data-lazy',
      arrows: true,
      hideUnclickableArrows: false
    };
  };

  Carousel.prototype.moveDirection = function(direction) {
    if (this.moving) {
      return false;
    }
    this.moving = true;
    this.scroller[direction]();
    return this.moving = false;
  };

  Carousel.prototype.resize = function() {
    this.applyOptions();
    return this.scroller.gotoCurrent();
  };

  Carousel.prototype.handlers = function() {
    this.arrowHandlers();
    return this.resizeHandler();
  };

  Carousel.prototype.resizeHandler = function() {
    return $(window).resize((function(_this) {
      return function() {
        if (_this.carouselWrapper.didResize()) {
          return _this.resize();
        }
      };
    })(this));
  };

  Carousel.prototype.arrowHandlers = function() {
    this.prevBtn.on('click', (function(_this) {
      return function(e) {
        return _this.moveDirection('prev');
      };
    })(this));
    return this.nextBtn.on('click', (function(_this) {
      return function(e) {
        return _this.moveDirection('next');
      };
    })(this));
  };

  return Carousel;

})();

$(function() {
  return window.Carousel = Carousel;
});
